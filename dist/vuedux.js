(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('redux')) :
	typeof define === 'function' && define.amd ? define(['redux'], factory) :
	(global.revux = factory(global.redux));
}(this, (function (redux) { 'use strict';

const hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y
  } else {
    return x !== x && y !== y
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true

  if (typeof objA !== 'object' || objA === null ||
    typeof objB !== 'object' || objB === null) {
    return false
  }

  const keysA = Object.keys(objA);
  const keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) return false

  for (let i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) ||
      !is(objA[keysA[i]], objB[keysA[i]])) {
      return false
    }
  }

  return true
}

const wrapActionCreators = (actionCreators) => dispatch => redux.bindActionCreators(actionCreators, dispatch);

var Provider = {
  name: 'Provider',
  functional: true,
  props: {
    store: Object
  },
  render (createElement, context) {
    // create wrapper provider for store
    const wrapper = {
      provide () {
        return {
          $$store: context.props.store
        }
      },
      render (h) {
        return h('div', this.$slots.default)
      }
    };
    return createElement(
      wrapper,
      context.data,
      context.children
    )
  }
};

/**
 * Extend Vue prototype + global mixin
 *
 * @param {Vue} Vue
 */

function install(Vue) {
  Vue.mixin({
    beforeDestroy() {
      if (this._unsubscribe) {
        this._unsubscribe();
      }
    }
  });
  const defaultMapState = () => ({});
  const defaultMapDispatch = dispatch => ({
    dispatch
  });

  Vue.prototype.$connect = function(mapState = defaultMapState, mapDispatch = defaultMapDispatch) {
    const vm = this;
    const __store__ = this.$store;
    const getMappedState = (state = __store__.getState()) => mapState(state);

    const actions = wrapActionCreators(mapDispatch)(__store__.dispatch);
    Object.keys(actions).forEach(key => {
      vm[key] = actions[key];
    });

    const observeStore = (store, currState, select, onChange) => {
      if (typeof onChange !== 'function') return null
      let currentState = currState || {};

      function handleChange() {
        const nextState = select(store.getState());
        if (!shallowEqual(currentState, nextState)) {
          const previousState = currentState;
          currentState = nextState;
          onChange(currentState, previousState);
        }
      }

      onChange(currentState, null); // trigger onChange on component init
      return store.subscribe(handleChange)
    };

    this._unsubscribe = observeStore(__store__, getMappedState(), getMappedState, (newState, oldState) => {
      Object.keys(newState).forEach(key => {
        if (vm[key] === undefined) {
          console.warn(`[revux] - you forgot to declare property **${key}** in your component's data function making it unreactive`);
        }

        vm.$set(vm, key, newState[key]);
      });
    });
  };

  Object.defineProperty(Vue.prototype, '$store', {
    get: function $store() {
      let store;
      let source = this;

      while (source) {
        if (source._provided && source._provided.$$store) {
          store = source._provided.$$store;
          break
        }
        source = source.$parent;
      }

      if (!store) {
        throw new Error('[revux] - No store provided to root component')
      } else {
        return store
      }
    }
  });

   Vue.component('Provider', Provider);
}

const revux = {
  install(_vue) {
    install(_vue);
  }
};

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(revux);
}

return revux;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
